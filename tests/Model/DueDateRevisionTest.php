<?php

namespace Depotwarehouse\YEGVotes\Tests\Model;

use Carbon\Carbon;
use App\Model\AgendaItem;
use App\Model\DueDateRevision;
use App\Model\Meeting;
use App\Model\Motion;
use App\Model\NullDate;
use Faker\Provider\Uuid;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Mockery as m;

class DueDateRevisionTest extends \TestCase
{

    use DatabaseTransactions;

    public function tearDown()
    {
        m::close();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * @test
     */
    public function it_can_compute_typical_revision()
    {
        $meeting = Meeting::create([ 'id' => 9001 ]);
        $agenda_item = AgendaItem::create([ 'id' => 9004, 'meeting_id' => $meeting->id, 'title' => 'test' ]);



        $motion = new Motion([ 'id' => Uuid::uuid(), 'description' => "Title:<BR><BR> <P>Action: That the revised due date September 14  2015  be approved.</P> <P>Department: Community Svcs.</P> <P> Sep. 14  2015</P>"]);
        $agenda_item->motions()->save($motion);

        $motion->save();

        $result = (new DueDateRevision($agenda_item))->revisedDueDate();

        $this->assertTrue((new Carbon('2015-09-14'))->eq($result));
    }

    /**
     * @test
     */
    public function it_can_extract_dates_with_two_dates()
    {
        $description_text = 'Title:<BR><BR> <P>Action:That the revised due date of October 6  2015  be approved. </P> <P>Department:Financial Svcs. and Utilities</P> <P>Oct. 5/6  2015</P>';

        $result = (new DueDateRevision(m::mock(AgendaItem::class)))->extractDate($description_text);

        $this->assertTrue((new Carbon('2015-10-06'))->eq($result));
    }

    /**
     * @test
     */
    public function it_returns_null_date_for_quarter_strings()
    {
        $description_text = '<P>3.&nbsp;homeED being included as a possible housing provider in 1 and 2 above  to advance the public engagement </P> <P>and return to Committee in the First Quarter of 2017&nbsp;with a recommendation on how to proceed with the development of the two pilot sites.</P> <P>Department:Sustainable Dev.</P> <P>First Quarter 2017</P> ';

        $result = (new DueDateRevision(m::mock(AgendaItem::class)))->extractDate($description_text);

        $this->assertInstanceOf(NullDate::class, $result);
        $this->assertEquals('first quarter 2017', $result->format("null"));
    }

}
